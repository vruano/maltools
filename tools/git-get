#!/usr/bin/env perl

use strict;
use warnings;

use File::Basename qw(dirname);
use File::Spec::Functions qw(catfile);
use Getopt::Long;

my $commit = undef;
my $branch = undef;
my $patch = undef;
my $patch_mark = ".patch_applied";
my $build_mark;

GetOptions("c=s" => \$commit,"b=s" => \$branch, "p=s" => \$patch, "build-mark|bm=s" => \$build_mark, "patch-mark|pm=s" => \$patch_mark);

$commit = undef if $commit && $commit eq "DEFAULT";
$branch = undef if $branch && $branch eq "DEFAULT";
$patch = undef if $patch && $patch eq "NONE";



if ($patch && !-e $patch) {
  die "patch file provided '$patch' does not exists or is inaccessible";
}

my $patch_applicable = 0;
my $new_url = shift or die "you need to specify a git url";
my $dir = shift or die "you need to specify a destination directory";

if (-e $dir) {
  -d $dir or die "destination directory '$dir' is in fact not a directory";
  $patch_applicable = ($patch_mark) ? ! -e catfile($dir,$patch_mark) : 1;
}
else {
  my $parent = dirname($dir);
  -e $parent or die "the parent of the destination directory '$dir' does not exists";
  -d $parent or die "the parent of the destination directory '$dir' is not in fact a directory";
  my $clone_command = "git clone --quiet $new_url $dir";
  print STDERR $clone_command,"\n";
  system($clone_command);
  exit $? if $?;
  $patch_applicable = 1;
}

my $branch_output = `cd $dir; git remote -v`;
my $remote_url = undef;
if ($?) {
  opendir(my $dest_dh,$dir) or die "could not open directory '$dir' for reading";
  my @non_trivial_entries = grep { $_ !~ /^\.+$/ } readdir($dest_dh);
  $#non_trivial_entries < 0 or die "the destination directory is not an svn working directory neither is empty, aborting!"; 
}
elsif ($branch_output =~ /^origin\s*(.+)\s*\(fetch\)\s*$/m) {
  $remote_url = $1;
}

$remote_url or die "could not determine the url of the remote git repository at '$dir'. aborting!!!";

my $need_update = 0;
my $current_branch = undef;
my $current_commit = undef;
my $branch_exists = 0;
my $commit_branch_exists = 0;


if ($branch || $commit) {
  my $branch_output = `cd $dir; git branch`;
  !$? && $branch_output =~ /^\s*\*\s*(.+)\s*$/m  or die "could not determine git branch at '$dir'. aborting!!!";
  $current_branch = $1;
  if ($branch) {
    $need_update = $current_branch ne $branch;
    $branch_exists = $branch_output =~ /\b\Q$branch\E\b/;
  }
  if ($commit) {
    $commit_branch_exists = $branch_output =~ /\b\Qcommit-$commit\E\b/;
  }
}

unless ($need_update || !$commit) {
  my $log_output = `cd $dir; git --no-pager log --max-count=1`;
  !$? && $log_output =~ /^\s*commit\s+(\S+)\s*$/m or  die "could not determine the git commit at '$dir'. aborting!!!";
  $current_commit = $1;
  $need_update = index($current_commit,$commit) != 0;
}

unless ($need_update || ($patch && $patch_applicable)) {
  exit 0;
}

unlink (catfile($dir,$build_mark)) if ($build_mark);

if ($need_update) {
  my $checkout_command;
  if ($branch && $branch_exists) {
    $checkout_command = "git checkout $branch";
  }
  elsif ($branch) {
    $checkout_command = "git checkout -b $branch";
    if ($commit) {
     $checkout_command .= " $commit";
    }
  }
  else { # commit must be difened otherwise we would have exit already.
    my $commit_branch = "commit-$commit";
    if ($commit_branch_exists) {
      $checkout_command = "git checkout $commit_branch";
    }
    else {
      $checkout_command = "git checkout -b $commit_branch $commit";
    }
  }

  print STDERR $checkout_command,"\n";
  system("cd $dir; $checkout_command");
  exit $? if $?;

  if ($commit) {
    my $log_output = `cd $dir; git --no-pager log --max-count=1`;
    !$? && $log_output =~ /^\s*commit\s+(\S+)\s*$/m or die "could not determine the git commit at '$dir'. aborting!!!";
    $current_commit = $1;
    index($current_commit,$commit) == 0 or
      die "resulting commit '$current_commit' and requested commit '$commit' do not match";
  }
}


if ($patch && $patch_applicable) {
 print STDERR "patch  -p0 -d $dir < $patch\n";
 system("patch  -p0 -d $dir < $patch");
 exit 1 if $?;
 system("touch " . catfile($dir,$patch_mark));
 exit 1 if $?;
}

exit 0;


