#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\begin_preamble

\renewcommand\paragraph{%
   \@startsection{paragraph}{4}{0mm}%
      {-\baselineskip}%
      {.5\baselineskip}%
      {\normalfont\normalsize\bfseries}}
\usepackage[all]{xy}
\usepackage{graphviz}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family sfdefault
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 11
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize a4paper
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 2cm
\headheight 1cm
\headsep 1cm
\footskip 1cm
\secnumdepth 4
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
PGV-A-VDISC
\begin_inset Newline linebreak
\end_inset


\size normal
Alignment and Variation Discovery
\end_layout

\begin_layout Author
Valentín Ruano-Rubio
\end_layout

\begin_layout Section*
Revision history
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2011-11-08
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Valentín Ruano-Rubio
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
First version to be review at the PV meeting on 2011-11-08
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2011-11-08
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Valentín Ruano-Rubio
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Completing a full skeleton spec for the PV meeting on 2011-11-08
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Section
Background
\end_layout

\begin_layout Subsection
Objectives
\end_layout

\begin_layout Standard
This document specifies the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
mbox{PGV-A-VDISC}
\end_layout

\end_inset

 task, a component of the Release Process for the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
mbox{MalariaGEN}
\end_layout

\end_inset

 Pf Genome Variation Community Project (
\emph on
the PGV project
\emph default
).
\end_layout

\begin_layout Standard
It will provide:
\end_layout

\begin_layout Itemize
A specification for the implementation of the task within the Release Process.
\end_layout

\begin_layout Itemize
A guide to its execution, which can be performed by any member of the PGV
 analysis team.
\end_layout

\begin_layout Itemize
A specification against which the task results can be tested.
\end_layout

\begin_layout Itemize
A checklist to verify the task’s completion.
\end_layout

\begin_layout Subsection
Task Overview
\end_layout

\begin_layout Standard
This task includes 5 interconnected and compulsory subtasks:
\end_layout

\begin_layout Enumerate
Initial alignment of sequencing reads of the the samples chosen by PGV-A-SEL
 to take part in the release against the corresponding genome reference.
 
\end_layout

\begin_layout Enumerate
Generation of SNP candidate list for the resulting alignments.
 
\end_layout

\begin_layout Enumerate
Read filtering based on the SNP candidate list (BWA-2-SOM).
 
\end_layout

\begin_layout Enumerate
Coverage analysis per sample.
 
\end_layout

\begin_layout Enumerate
Generation of VCF file with raw variation across all samples.
 
\end_layout

\begin_layout Subsection
Terminology
\end_layout

\begin_layout Itemize
The verbs “will”, “must” and “shall” denote a requirement that must be implement
ed for the specification to be fully met.
 
\end_layout

\begin_layout Itemize
The verbs “may” or “might” and the prefix “(optional)”, indicate a requirement
 that is desirable, but which is not mandatory for the fulfillment of these
 requirements.
 Typically these requirements are slated as mandatory for a later release
 of the software.
\end_layout

\begin_layout Section
Task Specification
\end_layout

\begin_layout Subsection
Inputs
\end_layout

\begin_layout Subsubsection
Manifest file
\end_layout

\begin_layout Standard
This file is central to the orchestration of the PGV-A-VDISC task as it
 could be to other parts of the release pipeline.
 It must be formated using JSON
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
target "http://en.wikipedia.org/wiki/JSON"

\end_inset


\end_layout

\end_inset

.
 Its sections as far as 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
mbox{PGV-A-VDISC}
\end_layout

\end_inset

 is concern will be individually described in different subsections right
 below.
\end_layout

\begin_layout Paragraph
Pipeline class, name and version
\end_layout

\begin_layout Standard
The manifest must contain three element that identify the manifest with
 the intended task and release:
\end_layout

\begin_layout Description
class code name to indicate the functionality of pipeline or task described
 in the manifest.
 For now and just following the present document name convention it should
 be 
\begin_inset Quotes eld
\end_inset

vdisc
\begin_inset Quotes erd
\end_inset

.
 This element can be used by software that deals with the manifest file
 to figure out how to deal with it in the future when we might have more
 than class or type of pipeline using the same approach.
\end_layout

\begin_layout Description
name code name for the task instance itself or perhaps the more global containin
g process.
 A sensible choice at this time is 
\begin_inset Quotes eld
\end_inset

pgv-a-vdisc
\begin_inset Quotes erd
\end_inset

; notice the name must not necessarily contain the class name despite the
 example.
 
\end_layout

\begin_layout Description
version version of the task, for example for release 1.3 this could simply
 be 
\begin_inset Quotes eld
\end_inset

1.3
\begin_inset Quotes erd
\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{verbatim}
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  "name" : "pgv-a-vdisc", "version" : "2.0", "class" : "vdisc",
\end_layout

\begin_layout Plain Layout

   ...
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Variables section
\begin_inset CommandInset label
LatexCommand label
name "sub:vars"

\end_inset


\end_layout

\begin_layout Standard
In the 
\emph on
variables
\emph default
 section you can optionally define some variables that will be interpolable
 in other sections across the manifest.
 This is quite useful, for example to indicate relative paths to a location
 outside the pipeline deployment directory.
\end_layout

\begin_layout Standard
For instance in the example blow 
\begin_inset Quotes eld
\end_inset

candidateSnps
\begin_inset Quotes erd
\end_inset

 would be resolved to 
\begin_inset Quotes eld
\end_inset

/nfs/team112/data/bwa.2010-09-07.snps
\begin_inset Quotes erd
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{verbatim}
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

   ...
\end_layout

\begin_layout Plain Layout

  "variables" : {
\end_layout

\begin_layout Plain Layout

    "datadir" : "/nfs/team112/data"
\end_layout

\begin_layout Plain Layout

  },
\end_layout

\begin_layout Plain Layout

   ...
\end_layout

\begin_layout Plain Layout

  "parameters" : {
\end_layout

\begin_layout Plain Layout

     "candidateSnps" : "${datadir}/bwa.2010-09-07.snps"; 
\end_layout

\begin_layout Plain Layout

  },
\end_layout

\begin_layout Plain Layout

   ...
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
By default there 3 predefined variables provided:
\end_layout

\begin_layout Description
basedir directory where the pipeline is going to be deployed.
\end_layout

\begin_layout Description
outdir directory where the pipeline output is suppose to go.
 Although not necessarily so, quite often might have the same value as 
\series bold
basedir
\series default
.
\end_layout

\begin_layout Description
softdir directory where the pipeline execution software and tools are installed.
\end_layout

\begin_layout Description
prog name of the command line program as per installation instructions (e.g.
 
\emph on
pgv
\emph default
).
\end_layout

\begin_layout Standard
Interpolation works as it does in PERL double-quoted strings
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
target "http://perlmeme.org/howtos/using_perl/interpolation.html"

\end_inset


\end_layout

\end_inset

.
 That means that in you actually mean to include $, @ or %, you must scape
 those characters with double slash '
\backslash

\backslash
' (notice '
\backslash
' is also an special character in JSON a thus need to be scaped like so
 too).
 For example, 
\begin_inset Quotes eld
\end_inset

$x
\begin_inset Quotes erd
\end_inset

 will return an string with the value of variable 'x' as defined in the
 variables section, whereas 
\begin_inset Quotes eld
\end_inset


\backslash

\backslash
$x
\begin_inset Quotes erd
\end_inset

 would simply result in '$x'.
 You can mark a JSON string in the manifest as non-interpolable starting
 it with '!'.
 In the unlikely event that you actually meant to start the non-interpolable
 string with '!' you should use put it twice '!!' but only one '!' will
 remain.
 If you wanted to start an interpolable string starting with '!', scape
 it with a double slash '
\backslash

\backslash
!'.
 If not used in this ways '!' is treated as a regular character.
 For example if variable 
\emph on
x
\emph default
 is set to 123:
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

 hello $x bye! 
\begin_inset Quotes eld
\end_inset

 
\begin_inset Formula $\Rightarrow$
\end_inset

 
\begin_inset Quotes erd
\end_inset

 hello 123 bye! 
\begin_inset Quotes eld
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

 hello 
\backslash

\backslash
$x bye! 
\begin_inset Quotes eld
\end_inset

 
\begin_inset Formula $\Rightarrow$
\end_inset

 
\begin_inset Quotes erd
\end_inset

 hello $x bye! 
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

! hello $x bye! 
\begin_inset Quotes eld
\end_inset

 
\begin_inset Formula $\Rightarrow$
\end_inset

 
\begin_inset Quotes eld
\end_inset

 hello $x bye! 
\begin_inset Quotes eld
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

!! hello $x bye! 
\begin_inset Quotes eld
\end_inset

 
\begin_inset Formula $\Rightarrow$
\end_inset

 
\begin_inset Quotes eld
\end_inset

! hello $x bye! 
\begin_inset Quotes eld
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset


\backslash

\backslash
! hello $x bye! 
\begin_inset Quotes eld
\end_inset

 
\begin_inset Formula $\Rightarrow$
\end_inset

 
\begin_inset Quotes eld
\end_inset

! hello 123 bye! 
\begin_inset Quotes eld
\end_inset


\end_layout

\begin_layout Standard
In order to keep the manifest body as clean as possible you should encapsulate
 complex interpolations in variables that can be then later used in the
 rest of the manifest.
\end_layout

\begin_layout Paragraph
Paths section
\begin_inset CommandInset label
LatexCommand label
name "sub:paths"

\end_inset


\end_layout

\begin_layout Standard
The manifest file will indicate the location of inputs and output using
 the path section whose value is and object literal or 
\emph on
hash.
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{verbatim}
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

   ...
\end_layout

\begin_layout Plain Layout

  "paths" : {
\end_layout

\begin_layout Plain Layout

    "coverage" : "${outdir}/coverage",
\end_layout

\begin_layout Plain Layout

    "snpsdata" : "${outdir}/snpsdata",
\end_layout

\begin_layout Plain Layout

    "alignments" : "${outdir}/alignments",
\end_layout

\begin_layout Plain Layout

  },
\end_layout

\begin_layout Plain Layout

   ...
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
All the following elements are mandatory:
\end_layout

\begin_layout Description
coverage where per-sample coverage files
\begin_inset CommandInset ref
LatexCommand eqref
reference "coverage-files"

\end_inset

 will be placed.
\end_layout

\begin_layout Description
snpsdata where per-sample snps files 
\begin_inset CommandInset ref
LatexCommand eqref
reference "snps-files"

\end_inset

 will be placed.
\end_layout

\begin_layout Description
alignments where per-sample alignment files 
\begin_inset CommandInset ref
LatexCommand eqref
reference "alignment-files"

\end_inset

 will be placed.
\end_layout

\begin_layout Standard
Input files and directories should exists and have valid content as described
 below.
 Output directories will be created if required.
 Existing output files might well be overwrite by this task.
\end_layout

\begin_layout Paragraph
List of sample to be included in the release
\end_layout

\begin_layout Standard
This list must contain the oxford codes of samples to be included in the
 release and must be found in the “
\emph on
samples
\emph default
” element of the corresponding data-release/freeze manifest file.
 Currently it can come in two possible flavours: as a simple array of oxford
 codes or a richer 
\emph on
hash
\emph default
 giving additional information on each sample.
\end_layout

\begin_layout Subparagraph
Array format
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{verbatim}
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

    ...,
\end_layout

\begin_layout Plain Layout

  "samples" : [ "PG0014-C", "PG0022-C", ..., "PA0178-CW" ],
\end_layout

\begin_layout Plain Layout

    ...
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Each element of the array would identify the sample within the release;
 this must be equal to the 
\emph on
oxford code
\emph default
 for that sample.
 If presented in this format the software implementing variant discovery
 will need to figure out automatically where the sequencing data for that
 sample leaves using current sample tracking databases such as Solaris or
 the data freeze manifest.
 
\end_layout

\begin_layout Subparagraph
Hash format
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{verbatim}
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

   ...
\end_layout

\begin_layout Plain Layout

   "samples" : {
\end_layout

\begin_layout Plain Layout

     "PA0007-C" : {
\end_layout

\begin_layout Plain Layout

       "solarisId" : 4123,
\end_layout

\begin_layout Plain Layout

       "oxfordCode" : "PA0007-C",
\end_layout

\begin_layout Plain Layout

       "dataSources" : [{
\end_layout

\begin_layout Plain Layout

          "url" : "irods:///seq/5019/5019_3_nonhuman#1.bam",
\end_layout

\begin_layout Plain Layout

          "md5" : "a012fab2319adee922ad18712",
\end_layout

\begin_layout Plain Layout

         }, ...]
\end_layout

\begin_layout Plain Layout

       ]
\end_layout

\begin_layout Plain Layout

     },
\end_layout

\begin_layout Plain Layout

     "PA0008-C" : {
\end_layout

\begin_layout Plain Layout

         ...
\end_layout

\begin_layout Plain Layout

     },
\end_layout

\begin_layout Plain Layout

     ...,
\end_layout

\begin_layout Plain Layout

     "PW0017-C" : {
\end_layout

\begin_layout Plain Layout

         ...
\end_layout

\begin_layout Plain Layout

     }
\end_layout

\begin_layout Plain Layout

   },
\end_layout

\begin_layout Plain Layout

   ...
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The hash keys are the id of the samples within the release.
 These are conventionally set to match the sample 
\emph on
oxford code
\emph default
 althought this does not need to be true necessarily; you should not relay
 on that and instead check the value of the 
\emph on
oxfordCode
\emph default
 element in the value object described below.
 
\end_layout

\begin_layout Standard
The hash value object shall contain information that is relevant for the
 processing of the sample by the components implementing 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
mbox{PGV-A-VDIC}
\end_layout

\end_inset

 is concerned:
\end_layout

\begin_layout Description
solarisId numerical ID of the sample in the Solaris DB (Solaris numerical
 ID, e.g.
 4912).
\end_layout

\begin_layout Description
oxfordCode the oxford code of the sample (e.g.
 PP0012-C).
\end_layout

\begin_layout Description
dataSources list of objects indicating where the sequence data for that
 sample is located; in occasions there might be more than one file per sample
 and thus the array.
 For each data source the following information must be provided:
\end_layout

\begin_deeper
\begin_layout Description
url the location of the source file (e.g.
 
\begin_inset Quotes eld
\end_inset

irods:///seq/5912/5912_1_nonhuman.bam
\begin_inset Quotes erd
\end_inset

).
 For now the only supported format is BAM
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
target "http://samtools.sourceforge.net/"

\end_inset


\end_layout

\end_inset

.
 The url protocol part (“irods:”, “file:”, “ftp:” …) would indicate how
 to get the data.
 If not indicated the default is 
\begin_inset Quotes eld
\end_inset

file:
\begin_inset Quotes erd
\end_inset

.
 If no host name is provided, we shall assume that they make reference to
 local system's default for that protocol (some Sanger server when executed
 within sanger and some Oxford server when executed in Oxford).
 The file part must be always be a complete absolute path; remember that
 you can use variables to implement relative paths.
\end_layout

\begin_layout Description
\begin_inset Note Note
status open

\begin_layout Plain Layout
index_url 
\emph on
(optional) 
\emph default
the location of the index file if any.
 It follows the same formatting rules as 
\emph on
url
\emph default
.
 When ommitted the software might try to find in at the same location as
 the data file substituting or appending 
\begin_inset Quotes eld
\end_inset

.bai
\begin_inset Quotes erd
\end_inset

 to the file extension 
\begin_inset Quotes eld
\end_inset

.bam
\begin_inset Quotes erd
\end_inset


\emph on
 
\emph default
(i.e.
 
\begin_inset Quotes eld
\end_inset

filename.bai
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

filename.bam.bai
\begin_inset Quotes erd
\end_inset

) but it won't result in and error if none is found.
 If you whish to explicitly indicate that there is no such a index file
 (e.g.
 the file is not in fact sorted) or that the one present at that location
 must not be used you shall indicate so explicitly with a 
\emph on
null
\emph default
: begin verbatim "index_url" : null end verbatim
\end_layout

\end_inset


\end_layout

\begin_layout Description
md5 
\emph on
(optional)
\emph default
 check sum of the content of the data file.
 If present it must match the file's md5 checksum.
\end_layout

\begin_layout Description
\begin_inset Note Note
status open

\begin_layout Plain Layout
index_md5 
\emph on
(optional) 
\emph default
check sum of the index file.
 If present it must match the index file md5 checksum.
 This value must not be provided if such a index file does not exists or
 if 
\emph on
index 
\emph default
element above is itself 
\emph on
null.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
With the hash format we are making certain what data sources are going to
 be used for each sample.
 This is preferible than to leave it to the software to make a guess.
 Using the hash list then we can make sure that the data use in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
mbox{PGV-A-VDISC}
\end_layout

\end_inset

 is the same as the one used in other stages of the release pipeline.
\end_layout

\begin_layout Paragraph
Parameter section
\end_layout

\begin_layout Standard
In this section in the manifest we indicate the value for parameter used
 in the variation discovery process.
 Current there are just 3 parameters:
\end_layout

\begin_layout Description
reference the base name of the reference genome files.
 This would correspond to the name of the main fasta file containing the
 reference sequences, other associated file names are calculated from that
 one 
\begin_inset CommandInset ref
LatexCommand eqref
reference "sub:reference"

\end_inset

.
\end_layout

\begin_layout Description
candidateSnps a string with one of the following values:
\end_layout

\begin_deeper
\begin_layout Description
\begin_inset Quotes eld
\end_inset

all
\begin_inset Quotes erd
\end_inset

 all positions and alleles are considered a possible variants.
\end_layout

\begin_layout Description
\begin_inset Quotes eld
\end_inset

calculate
\begin_inset Quotes erd
\end_inset

 the list will be recreated from the sample included in the pipeline.
\end_layout

\begin_layout Description
\begin_inset Quotes eld
\end_inset

provided
\begin_inset Quotes erd
\end_inset

 the list will be provided externally.
\end_layout

\end_deeper
\begin_layout Description
candidateSnpsList a string indicating the name file or url were to find
 the pre-existing candidate snps list, if 
\series bold
candidateSnps
\series default
 = 
\begin_inset Quotes eld
\end_inset

provided
\begin_inset Quotes erd
\end_inset

, or where to deposite the calculated one, if 
\series bold
candidateSnps
\series default
 = 
\begin_inset Quotes eld
\end_inset

calculate
\begin_inset Quotes erd
\end_inset

.
 A valid value must be provided in those cases.
 If 
\series bold
candidateSnps
\series default
 = 
\begin_inset Quotes eld
\end_inset

all
\begin_inset Quotes erd
\end_inset

, it simply will be ignored.
\end_layout

\begin_layout Description
minBaseQ minimum base call quality filtering value to be used when generating
 the Snps list per sample.
 This must contain a integer value in Phred scale 0 (no filtering) or above.
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{verbatim}
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

   ...
\end_layout

\begin_layout Plain Layout

  "parameters" : {
\end_layout

\begin_layout Plain Layout

    "reference" : "${datadir}/refseq/3D7_pm.fa",
\end_layout

\begin_layout Plain Layout

    "candidateSnps" : "provided",
\end_layout

\begin_layout Plain Layout

    "candidateSnpsList" : "${datadir}/bwa.Pf.candidates-2011-11-10.snps",
\end_layout

\begin_layout Plain Layout

    "minBaseQ" : 27
\end_layout

\begin_layout Plain Layout

  },
\end_layout

\begin_layout Plain Layout

   ...
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Reference genome
\begin_inset CommandInset label
LatexCommand label
name "sub:reference"

\end_inset


\end_layout

\begin_layout Standard
The location of the reference is determined by the 
\emph on
paths/reference 
\emph default
element in the manifest file 
\begin_inset CommandInset ref
LatexCommand eqref
reference "sub:paths"

\end_inset

.
 That value must refer to the file that contains the reference's sequences
 in 
\emph on
fasta
\emph default
 format
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
target "http://en.wikipedia.org/wiki/FASTA_format"

\end_inset


\end_layout

\end_inset

 that can be used for NGS analysis tools:
\end_layout

\begin_layout Standard
The referenced file must be a valid fasta formated sequence file that can
 be used by NGS analysis software:
\end_layout

\begin_layout Itemize
sequence ids do not contain spaces, control or other exotic characters.
 Thus please use alpha-numerical (plus '_' or '-') whenever possible.
 
\end_layout

\begin_layout Itemize
It must be indexable, and thus there must not be any blank or comment line.
 
\end_layout

\begin_layout Itemize
All sequence data lines must have constant length at least within each sequence
 with the notorious exception of the last line one that might be shorter
 in order to match the sequence length exactly.
 
\end_layout

\begin_layout Itemize
Sequences must not contain any gaps although they may contain unknown or
 ambiguous IUPAC codes along with the four standard nucleotides ACGT.
 
\end_layout

\begin_layout Standard
In addition with the main sequence file there should be at least two other
 companion files located whose name and content are derived from the sequence
 file's as indicated below.
\end_layout

\begin_layout Paragraph
Reference index file
\end_layout

\begin_layout Standard
This file's name is the same as the reference appending 
\begin_inset Quotes eld
\end_inset

.fai
\begin_inset Quotes erd
\end_inset

 to its full name (i.e.
 including extension).
 It is a short TSV file that indicates the offset of each sequence in the
 main file, its length, the number of residues per line and the length of
 a line including spaces.
 This file is used by programs to be able to implement fast random position
 access to reference positions and regions.
 Example:
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{verbatim}
\end_layout

\begin_layout Plain Layout

MAL1   643292  6        60 61 
\end_layout

\begin_layout Plain Layout

MAL10  1687655 654027   60 61 
\end_layout

\begin_layout Plain Layout

MAL11  2038337 2369817  60 61 
\end_layout

\begin_layout Plain Layout

MAL12  2271478 4442134  60 61
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

MAL9   1541723 22084755 60 61 
\end_layout

\begin_layout Plain Layout

MITO1  5967    23652181 60 61 
\end_layout

\begin_layout Plain Layout

PLAST1 15421   23658256 60 61 
\end_layout

\begin_layout Plain Layout

PLAST2 14009   23673943 60 61 
\end_layout

\begin_layout Plain Layout


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This file can be generated for example using Samtools' 
\emph on
faidx
\emph default
 command that would automaticaly create a name with the approriate name
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{verbatim}$ samtools faidx my-reference.fa      # creates the file name
 my-reference.fa.fai
\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Reference dictionary file
\begin_inset CommandInset label
LatexCommand label
name "sub:dictionary-file"

\end_inset


\end_layout

\begin_layout Standard
This file's name is the same as the reference's sequence file changing its
 extension with 
\begin_inset Quotes eld
\end_inset

.dict
\begin_inset Quotes erd
\end_inset

 (i.e.
 from 
\begin_inset Quotes eld
\end_inset

my-reference.fa
\begin_inset Quotes erd
\end_inset

 to 
\begin_inset Quotes eld
\end_inset

my-reference.dict
\begin_inset Quotes erd
\end_inset

).
 This file contains a pre-cooked BAM header section that correspond to the
 reference.
 Alignments that use that reference must contain this information in the
 header in order to unequivocaly identify the reference that was used for
 the alignment.
 Nevertheless only the sequence ids, lenght and check sums will be used
 for verification purposes (
\emph on
SN, LN
\emph default
 and 
\emph on
M5
\emph default
 fields) as programs might compose other field values differently and the
 reference might be phisically relocated from time to time.
 Example:
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
tiny
\end_layout

\begin_layout Plain Layout


\backslash
begin{verbatim}
\end_layout

\begin_layout Plain Layout

@HD     VN:1.0  SO:unsorted
\end_layout

\begin_layout Plain Layout

@SQ     SN:MAL1 LN:643292       UR:file:/nfs/team112/PGV_RD/data/reference/3D7_p
m.fa    M5:6a7e6510bdae0ad38e8bc3aa1adf537f
\end_layout

\begin_layout Plain Layout

@SQ     SN:MAL10        LN:1687655      UR:file:/nfs/team112/PGV_RD/data/referen
ce/3D7_pm.fa    M5:a13945591ca5a84710655be93c75d623
\end_layout

\begin_layout Plain Layout

@SQ     SN:MAL11        LN:2038337      UR:file:/nfs/team112/PGV_RD/data/referen
ce/3D7_pm.fa    M5:909466c6a0faec815f63b21047beea15
\end_layout

\begin_layout Plain Layout

@SQ     SN:MAL12        LN:2271478      UR:file:/nfs/team112/PGV_RD/data/referen
ce/3D7_pm.fa    M5:c4427f71425a56c2e6325089b6bc2b7d
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

@SQ     SN:MAL9 LN:1541723      UR:file:/nfs/team112/PGV_RD/data/reference/3D7_p
m.fa    M5:87f4b581b5db461261b36b5344fe9df4
\end_layout

\begin_layout Plain Layout

@SQ     SN:MITO1        LN:5967 UR:file:/nfs/team112/PGV_RD/data/reference/3D7_p
m.fa    M5:2eedeb16ed825e7c843f0e70163fd635 
\end_layout

\begin_layout Plain Layout

@SQ     SN:PLAST1       LN:15421        UR:file:/nfs/team112/PGV_RD/data/referen
ce/3D7_pm.fa    M5:c81e1e2bf3ef551d5db412bec1e441f0
\end_layout

\begin_layout Plain Layout

@SQ     SN:PLAST2       LN:14009        UR:file:/nfs/team112/PGV_RD/data/referen
ce/3D7_pm.fa    M5:d77f23357657a80be88c8eec6191a425
\end_layout

\begin_layout Plain Layout


\backslash
end{verbatim}
\end_layout

\begin_layout Plain Layout


\backslash
normalsize
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The content of this file can be generated from the main sequence file using
 Picard package:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{verbatim} 
\end_layout

\begin_layout Plain Layout

$ picard CreateDictionaryFile REFERENCE=my-reference.fa OUTPUT=my-reference.dict
 
\end_layout

\begin_layout Plain Layout


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Candidate Snps list file
\begin_inset CommandInset label
LatexCommand label
name "sub:inputCandidateSnpsList"

\end_inset


\end_layout

\begin_layout Standard
Whether pre-existing or generated as part of this task, this file must be
 a TSV without header and four columns
\end_layout

\begin_layout Enumerate
Chromosome name (e.g.
 MAL1, MAL10, ...
 MAL9, MITO1, ..)
\end_layout

\begin_layout Enumerate
1-based position within the chromosome (e.g.
 1, 12000, 3000121, ...)
\end_layout

\begin_layout Enumerate
Reference nucleotide at this position: A,C,G, or T.
\end_layout

\begin_layout Enumerate
IUPAC code indicate what alternative (non-reference) alleles are accepted
 as possible variation at that position: A,B,C,D,G,H,K,M,R,S,T,V,W or Y.
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{verbatim}
\end_layout

\begin_layout Plain Layout

  ...
\end_layout

\begin_layout Plain Layout

MAL1    597241  C       T
\end_layout

\begin_layout Plain Layout

MAL1    597250  A       G
\end_layout

\begin_layout Plain Layout

MAL1    597259  G       M
\end_layout

\begin_layout Plain Layout

MAL1    597268  G       Y
\end_layout

\begin_layout Plain Layout

MAL1    597269  A       T
\end_layout

\begin_layout Plain Layout

MAL1    597278  G       H
\end_layout

\begin_layout Plain Layout

MAL1    597285  T       M
\end_layout

\begin_layout Plain Layout

MAL1    597290  T       C
\end_layout

\begin_layout Plain Layout

MAL1    597294  A       T
\end_layout

\begin_layout Plain Layout

  ...
\end_layout

\begin_layout Plain Layout


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The content of the file must be sorted by chromosome (in the same order
 as the reference) and position.
 Only possible Snp positions are include therefore you should expect to
 se an exahustive position list.
 
\end_layout

\begin_layout Subsubsection
Sequence data files
\end_layout

\begin_layout Standard
These must be all in BAM format and their location can be determined in
 the Manifest file or automatically using sample tracking databases such
 as Solaris.
 These do not need to be already aligned.
 However, if they are aligned, the reference is the same as the release
 reference (as dermined by the header and dictionary file 
\begin_inset CommandInset ref
LatexCommand eqref
reference "sub:dictionary-file"

\end_inset

) and the algorithm used for alignmed is the same as the one to be used
 by the release, their could be reused as such avoiding unecessar realignment.
\end_layout

\begin_layout Paragraph
Sequence data file location resolution
\end_layout

\begin_layout Standard
The location of the sequence data file or files for any given sample might
 be resolved using one of the following ways:
\end_layout

\begin_layout Enumerate
If the manifest file uses the hash sample list format and the 
\emph on
data
\emph default
 element is non empty for that sample, file locations are obtained from
 the url field of each element of the array.
\end_layout

\begin_layout Enumerate
the locations are dinamycally resolved using the sample tracking databases.
\end_layout

\begin_layout Paragraph
Header and read-group constraints
\begin_inset CommandInset label
LatexCommand label
name "sub:read-group-constraints"

\end_inset


\end_layout

\begin_layout Standard
Ideally, the sequence data headers should be as accurate as possible including
 data source and methodology tracking information.
 Nevertheless at this point the only mandatory requirement is that read
 group information is well formed:
\end_layout

\begin_layout Itemize
each read-group is defined the header (@RG entries), 
\end_layout

\begin_layout Itemize
that there is no empty groups (without reads),
\end_layout

\begin_layout Itemize
and that all reads belong to a group declared in the header:
\end_layout

\begin_deeper
\begin_layout Itemize
no orphan reads without a read-group
\end_layout

\begin_layout Itemize
nor undeclared 
\emph on
phantom
\emph default
 read-groups.
\end_layout

\end_deeper
\begin_layout Subsection
Outputs
\end_layout

\begin_layout Standard
The pipeline generates 3 major set of outputs the 
\emph on
alignment
\emph default
, 
\emph on
snps list
\emph default
 and 
\emph on
coverage
\emph default
 files with one file of each for every sample including in the analysis
 with usable sequence data.
 In addition the process will generate a candidate Snp list if that was
 requested using the parameters.
 
\end_layout

\begin_layout Subsubsection
Alignment files
\begin_inset CommandInset label
LatexCommand label
name "alignment-files"

\end_inset


\end_layout

\begin_layout Standard
There will be one file per sample and will be located in the directory indicated
 by 
\emph on
paths/alignments
\emph default
 element in the input manifest.
 The file name will be the id of the sample in the release (typically its
 oxford code) followed by the 
\begin_inset Quotes eld
\end_inset

.bam
\begin_inset Quotes erd
\end_inset

 extension.
 This files will comply with the following constraints:
\end_layout

\begin_layout Itemize
they are all in compressed BAM format,
\end_layout

\begin_layout Itemize
reads will be sorted by reference coordinates.
 The header will confirm that: the first line will be of the form 
\begin_inset Quotes eld
\end_inset

@HD ...
 SO:coordinate
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Itemize
it will contain a valid reference dictionary matching the reference's at
 least in the important fields (
\emph on
SN
\emph default
, 
\emph on
SL
\emph default
 and 
\emph on
M5
\emph default
) and order 
\begin_inset CommandInset ref
LatexCommand eqref
reference "sub:dictionary-file"

\end_inset

.
\end_layout

\begin_layout Itemize
read-group declaration in the headers and read-group participation of reads
 will follow the constraints listed above 
\begin_inset CommandInset ref
LatexCommand eqref
reference "sub:read-group-constraints"

\end_inset

.
\end_layout

\begin_layout Itemize
the sample alignment will contain all reads present in the original sequence
 data files including unmapped, and also those filtered out by the 
\emph on
bwa2som
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Snp-O-Matic filtering is only reflected in the snp list files.
\end_layout

\end_inset


\emph default
 step.
\end_layout

\begin_layout Standard
In addition, in the same directory there will be a 
\begin_inset Quotes eld
\end_inset

index
\begin_inset Quotes erd
\end_inset

 file for each alignment with the 
\begin_inset Quotes eld
\end_inset

.bam.bai
\begin_inset Quotes erd
\end_inset

 extension.
\end_layout

\begin_layout Subsubsection
Snps list files
\begin_inset CommandInset label
LatexCommand label
name "snps-files"

\end_inset


\end_layout

\begin_layout Standard
There will be on file per sample located right under the directory indicated
 by 
\emph on
paths/snpsdata 
\emph default
element in the input manifest.
 The file name will be the id of the sample in the release (typically its
 oxford code) following by the 
\begin_inset Quotes eld
\end_inset

.snps
\begin_inset Quotes erd
\end_inset

 extension.
\end_layout

\begin_layout Standard
This is TSV file without header and 5 columns:
\end_layout

\begin_layout Enumerate
Filtered allele depth or read-count
\end_layout

\begin_layout Enumerate
Reference sequence name
\end_layout

\begin_layout Enumerate
1-based position within the reference sequence
\end_layout

\begin_layout Enumerate
The reported allele: the one seen at that position and sample with the depth
 indicated in the column 1.
\end_layout

\begin_layout Enumerate
The reference allele at that position in the reference.
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{verbatim}
\end_layout

\begin_layout Plain Layout

              ...
\end_layout

\begin_layout Plain Layout

   196 MAL1    8822    C       T
\end_layout

\begin_layout Plain Layout

   115 MAL1    8822    T       T 
\end_layout

\begin_layout Plain Layout

    53 MAL1    8850    A       C 
\end_layout

\begin_layout Plain Layout

   112 MAL1    8850    C       C 
\end_layout

\begin_layout Plain Layout

    81 MAL1    8850    T       C 
\end_layout

\begin_layout Plain Layout

   126 MAL1    8851    G       T 
\end_layout

\begin_layout Plain Layout

   117 MAL1    8851    T       T 
\end_layout

\begin_layout Plain Layout

    98 MAL1    8875    C       T 
\end_layout

\begin_layout Plain Layout

    13 MAL1    8875    T       T 
\end_layout

\begin_layout Plain Layout

    83 MAL1    8876    A       A 
\end_layout

\begin_layout Plain Layout

    13 MAL1    8876    C       A 
\end_layout

\begin_layout Plain Layout

    13 MAL1    8876    G       A 
\end_layout

\begin_layout Plain Layout

   102 MAL1    8880    G       T 
\end_layout

\begin_layout Plain Layout

    30 MAL1    8885    C       C 
\end_layout

\begin_layout Plain Layout

    60 MAL1    8885    T       C 
\end_layout

\begin_layout Plain Layout

           ...
\end_layout

\begin_layout Plain Layout


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This file is sorted by reference sequence name (same order as the reference
 sequence file) and position.
 This file only reports the depth of alleles that:
\end_layout

\begin_layout Itemize
are present in the candidate Snps list
\end_layout

\begin_deeper
\begin_layout Itemize
the position is part of the candidate Snps list
\end_layout

\begin_layout Itemize
the allele is either the reference or one of the possible alternatives as
 indicated in the candidate snps list last column ambiguity IUPAC code.
\end_layout

\end_deeper
\begin_layout Itemize
have non-zero coverage in the sample
\end_layout

\begin_deeper
\begin_layout Itemize
after bwa2som read filtering
\end_layout

\begin_layout Itemize
after discarding base calls that do not past the quality threshold indicated
 in 
\emph on
parameters/minBaseQ.
\end_layout

\end_deeper
\begin_layout Standard
As a consequence there might be none, one or more than one line for the
 same position in the genome.
 All lines that refer to the same position are found in succesion in the
 file and aggregatively they summary the depth of each observed allele and
 that position.
 
\end_layout

\begin_layout Subsubsection
Coverage files
\begin_inset CommandInset label
LatexCommand label
name "coverage-files"

\end_inset


\end_layout

\begin_layout Standard
There will be one file per sample and will be located in the directory indicated
 by 
\emph on
paths/coverage
\emph default
 element in the input manifest.
 The file name will be the id of the sample in the release (typically its
 oxford code) followed by the 
\begin_inset Quotes eld
\end_inset

.coverage
\begin_inset Quotes erd
\end_inset

 extension.
 
\end_layout

\begin_layout Standard
This file is formated as a TSV file with two header lines.
 The first line indicates the location of the reference file as illustrated
 in the example bellow.
 The second give a human friendly name to each of the column of the table
 that expands until the end of the file.
 There is a total of 7 columns in the following order:
\end_layout

\begin_layout Description
Chromosome the name of the reference sequence or chromosome
\end_layout

\begin_layout Description
Position 1-based position in the chromosome that the lane referers to.
\end_layout

\begin_layout Description
Reference the reference nucleotide at that chromosome and position.
\end_layout

\begin_layout Description
A absolute depth (aka read-count) of the Adedine allele.
\end_layout

\begin_layout Description
C absolute depth of the Cytosine allele.
\end_layout

\begin_layout Description
G absolute depth of the Guanine allele.
\end_layout

\begin_layout Description
T absolute depth of the Thymine allele.
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{verbatim}
\end_layout

\begin_layout Plain Layout

REFERENCE /nfs/team112/PGV_RD/data/reference/3D7_pm.fa
\end_layout

\begin_layout Plain Layout

Chromosome      Position        Reference       A       C       G      
 T 
\end_layout

\begin_layout Plain Layout

MAL1    1       C       0       1       0       0
\end_layout

\begin_layout Plain Layout

MAL1    2       T       0       0       0       2
\end_layout

\begin_layout Plain Layout

MAL1    3       A       1       0       3       0
\end_layout

\begin_layout Plain Layout

MAL1    4       A       5       0       0       0
\end_layout

\begin_layout Plain Layout

MAL1    5       A       4       1       0       0
\end_layout

\begin_layout Plain Layout

MAL1    6       C       0       5       0       0
\end_layout

\begin_layout Plain Layout

MAL1    7       C       0       6       0       0
\end_layout

\begin_layout Plain Layout

MAL1    8       T       0       3       0       5
\end_layout

\begin_layout Plain Layout

MAL1    9       A       7       0       1       0
\end_layout

\begin_layout Plain Layout

MAL1    10      A       7       0       0       1
\end_layout

\begin_layout Plain Layout

MAL1    11      A       8       0       0       0
\end_layout

\begin_layout Plain Layout

MAL1    12      C       0       9       0       0 
\end_layout

\begin_layout Plain Layout

   ...
\end_layout

\begin_layout Plain Layout


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This file is order by chromosome name (same as the reference) and position.
 There is one line per position in the genome thus some might contain all
 0 depths.
\end_layout

\begin_layout Subsubsection
Calculated candidate Snps list
\end_layout

\begin_layout Standard
If a new candidate Snps list is calculate as requested using the parameters,
 
\series bold
candidateSnps
\series default
 = 
\emph on

\begin_inset Quotes eld
\end_inset

calculate
\begin_inset Quotes erd
\end_inset


\emph default
, this output file should be found in the location indicated by the parameter
 
\series bold
candidateSnpsList
\series default
.
 Its format must match the one describe in the inputs section 
\begin_inset CommandInset ref
LatexCommand eqref
reference "sub:inputCandidateSnpsList"

\end_inset

.
\end_layout

\begin_layout Subsection
Detailed workflow
\end_layout

\begin_layout Standard
The software to manage the pipeline and perform other related operation
 with the data need to be installed once for each new realease of the software.
 To be able to perform operations on the pipeline you need to set up the
 environment per shell/ssh session; however it is possible to include this
 initialization as part of your account session configuration script thus
 making his step effordless.
 
\end_layout

\begin_layout Standard
For each possible analysis combination of samples and parameters (i.e.
 different manifest file) you will need to compose the manifest file and
 create a pipeline from it using the framework as indicated in the next
 section.
 Then running the analysis could be as simple as just 
\begin_inset Quotes eld
\end_inset

press the button
\begin_inset Quotes erd
\end_inset

 and wait for result to come back in a few hours, days or weeks later...
 or might demand to 
\begin_inset Quotes eld
\end_inset

press it
\begin_inset Quotes erd
\end_inset

 several times and some task might fail for unforeseen problem with the
 data itself, not enough resources (memory, disk) or just random failures.
 The running process will try to resume the job were it crashed.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename workflow.dot

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
overall workflow
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Implementation
\end_layout

\begin_layout Subsubsection
Architecutre
\end_layout

\begin_layout Standard
The software framework enclose in-house components writen in PERL, C++ and
 R (Java are in the horizon for 
\emph on
Anopheles
\emph default
 and might be used in 
\emph on
Plasmodium
\emph default
), and external dependencies in PERL, C and Java.
 
\end_layout

\begin_layout Standard
The pipeline executing engine is based in GNU Make to coordinate the dependencie
s between subtasks.
\end_layout

\begin_layout Subsection
Deployment
\end_layout

\begin_layout Subsubsection
Environment
\end_layout

\begin_layout Standard
The system once develop a beta version should be able to be configurable
 to run in Sanger system (from farm2 head-nodes) and Oxford system (cluster
 nodes such as foxtrot).
 The use should have at his disposal:
\end_layout

\begin_layout Itemize
A user account in the corresponding system
\end_layout

\begin_layout Itemize
Plenty of space in the scratch area (/lustre/* for Sanger, /data/malariagen/scra
tch/* in Oxford).
\end_layout

\begin_layout Itemize
Read-onl access to Sanger iRods if you are going to pull information from
 it.
 In Sanger this should be out of the box, in Oxford it can be set up with
 ssh tunneling.
\end_layout

\begin_layout Itemize
Read-only access to Sample tracking information (Solaris DB or Data freeze
 file).
 Out of the box in Sange, Oxford can be solved by ssh tunneling or copy
 (also Solaris cam be copied as is not that big).
\end_layout

\begin_layout Standard
The build and installation procedure takes care of pulling dependencies
 (software) that are not standard or are not of a more genera purpose; the
 later you be installed by system administrator.
 Major software pre-requisites:
\end_layout

\begin_layout Itemize
Java 6+
\end_layout

\begin_layout Itemize
Ant 1.8+
\end_layout

\begin_layout Itemize
Mysql connection libraries.
\end_layout

\begin_layout Itemize
R 2.10+
\end_layout

\begin_layout Itemize
CPAN and perl modules needed as revealed by compiling and errors; however
 a list is in elaboration as to provide the means to facilitat the perl
 setup in one go.
\end_layout

\begin_layout Subsubsection
Configuration
\end_layout

\begin_layout Paragraph
Get the software
\end_layout

\begin_layout Standard
The current versions for Sanger and Oxford can in Sanger subversion repostory
 under:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{verbatim}
\end_layout

\begin_layout Plain Layout

svn+ssh://svn.internal.sanger.ac.uk/repos/svn/malaria/agv_pipeline/branches/Pfalcipa
rum
\end_layout

\begin_layout Plain Layout

svn+tunnel_ssh://you@localhost/repos/svn/malaria/agv_pipeline/branches/Pfalcipar
umOxford
\end_layout

\begin_layout Plain Layout


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The most up to date with the configuration and execution protocol described
 here is the Oxford one but changes shall be merged at some point into the
 Sanger branch.
 Ideally a single branch (or trunk) should be able to deal with both set-ups.
\end_layout

\begin_layout Standard
The rest of the document will assume that we are working in Oxford .
\end_layout

\begin_layout Standard
To get the software installed, let's say under you own src directory under
 home directory, you just need to check it out:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{verbatim}$ svn co svn+tunnel_ssh://you@localhost/repos/.../branches/Pfalcipar
umOxford ~/src/PGV
\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Installing the software
\end_layout

\begin_layout Standard
Using ant run the 
\begin_inset Quotes eld
\end_inset

install
\begin_inset Quotes erd
\end_inset

 target
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{verbatim}
\end_layout

\begin_layout Plain Layout

$ cd ~/src/PGV
\end_layout

\begin_layout Plain Layout

$ ant install
\end_layout

\begin_layout Plain Layout


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
It will ask you for some parameter to customize the installation:
\end_layout

\begin_layout Itemize
Where to install the software, less assume '
\emph on
/software/pgv'
\emph default
 
\end_layout

\begin_deeper
\begin_layout Itemize
Wherever you choose, it must be accessible from the farm and computing nodes
 uder the same absolute name.
 In Sanger this could be under your home directory, the team /nfs space
 or (not /warehouse due to lack of access nor scratch area due to policies).
 In Oxford currently anywere under /data is safe.
\end_layout

\end_deeper
\begin_layout Itemize
Name of the base script; that is the command that you are going to use to
 run operation, '
\emph on
pgv
\emph default
' is sensible choice.
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{verbatim}
\end_layout

\begin_layout Plain Layout

$ ant install 
\end_layout

\begin_layout Plain Layout

Buildfile: /home/you/src/PGV/build.xml
\end_layout

\begin_layout Plain Layout

install.config: 
\end_layout

\begin_layout Plain Layout

      [input] Select base command and configuration name [pgv]
\end_layout

\begin_layout Plain Layout


\backslash
end{verbatim}
\backslash
textbf{pgv}
\backslash
begin{verbatim}
\end_layout

\begin_layout Plain Layout

      [input] Installation root directory? [/home/you/PGV_RD] 
\end_layout

\begin_layout Plain Layout


\backslash
end{verbatim}
\end_layout

\begin_layout Plain Layout


\backslash
textbf{/software/PGV}
\backslash
begin{verbatim} 
\end_layout

\begin_layout Plain Layout

[propertyfile] Updating property file: /home/you/src/PGV_RD/build/install.propert
ies
\end_layout

\begin_layout Plain Layout

init:
\end_layout

\begin_layout Plain Layout

      ...
\end_layout

\begin_layout Plain Layout


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Your choices will be stored in ./build/intall.properties so next time you
 might skip the questioning like so:
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{verbatim}
\end_layout

\begin_layout Plain Layout

$ ant install -Dinstall.config=./build/install.properties
\end_layout

\begin_layout Plain Layout


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The installation procedure will take a while in which it will pull analysis
 sensitive software (bwa, samtools, picard, gatk and so forth) from the
 corresponding source control repositories, compile the C and Java code
 and prepare the sofware directory structure layout.
 Finally this will copy all files to the requested installation directory.
\end_layout

\begin_layout Subsubsection
Execution
\end_layout

\begin_layout Paragraph
Environment setup
\end_layout

\begin_layout Standard
In order to get the 
\emph on
'pgv' 
\emph default
command interface and additional analysis program in the path and ready
 to run, you need to source one of the 
\begin_inset Quotes eld
\end_inset

setenv
\begin_inset Quotes erd
\end_inset

 shell scripts depending on what shell you are using (setenv.sh for bash-like
 and setenv.csh for tcsh like).
 This operation is needed once per shell session and you might include as
 part of your shell standard setup (adding it to .tcshrc, .bashrc, .bash_profile).
\end_layout

\begin_layout Standard
These scripts are found under the 
\begin_inset Quotes eld
\end_inset

bin
\begin_inset Quotes erd
\end_inset

 subdirectory right under the installation directory.
 Assuming a bash like environment:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{verbatim}$ source /software/pgv/bin/setenv.sh 
\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Now you should be able to run various analytical program such as samtools,
 picard and so.
 Also this include the base script.
 For example let's list the available sub-commands:
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
small
\end_layout

\begin_layout Plain Layout


\backslash
begin{verbatim}$ pgv help
\end_layout

\begin_layout Plain Layout

help
\end_layout

\begin_layout Plain Layout

    shows extended information on available commands:
\end_layout

\begin_layout Plain Layout

Commands:
\end_layout

\begin_layout Plain Layout

    alignment-stats 	merge read alignments from several sam/bam files into
 one
\end_layout

\begin_layout Plain Layout

    annotate-sample-tree 	reformat a sample tree adding attributes values
 to it
\end_layout

\begin_layout Plain Layout

      ...
\end_layout

\begin_layout Plain Layout

    bam-set-analysis    genotypes a set of samples
\end_layout

\begin_layout Plain Layout

    candidate-snps      from vcf files calculate the candidate snplist
\end_layout

\begin_layout Plain Layout

      ...
\end_layout

\begin_layout Plain Layout

    pipeline 	   pipeline   wide operations
\end_layout

\begin_layout Plain Layout

    query           execute some  query relevant to the AGV pipeline
\end_layout

\begin_layout Plain Layout

    read-counts 	genotypes a set of samples
\end_layout

\begin_layout Plain Layout

    recal-analysis  perform the recalibration quality score analysis
\end_layout

\begin_layout Plain Layout

     ....
\end_layout

\begin_layout Plain Layout

    variant-filter filters variants from a vcf file
\end_layout

\begin_layout Plain Layout

    variant-info   add variant information to a vcf file
\end_layout

\begin_layout Plain Layout

    variant-slice  slice out variants based on whether they passed filters
 or not
\end_layout

\begin_layout Plain Layout

     ....
\end_layout

\begin_layout Plain Layout


\backslash
end{verbatim}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Create the pipeline
\end_layout

\begin_layout Standard
Assuming that you have created a valid manifest file you can create and
 deploy the corresponding pipeline environment with:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{verbatim}$ pgv pipeline create --manifest my-manifest.json
\backslash

\end_layout

\begin_layout Plain Layout

    --basedir /data/malariagen/pipelines/pgv-a-vdisc-v1.3
\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Run pipeline
\end_layout

\begin_layout Standard
And run it like so:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{verbatim}$ pgv pipeline run --basedir /data/malriagen/pipelines/pgv-a-vdis
c-v1.3
\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Since the run can take long and will output quite a few log message to the
 standard output and standard error channels it is better if we use nohup
 on it:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{verbatim}$ /usr/bin/nohup pgv pipeline run
\backslash

\end_layout

\begin_layout Plain Layout

    --basedir /data/malriagen/pipelines/pgv-a-vdisc-v1.3 > pgv-a-vdisc-v1.3.nhout
\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Validate run
\end_layout

\begin_layout Standard
TBA
\end_layout

\begin_layout Subsection
Analysis and testing
\end_layout

\begin_layout Standard
TBA
\end_layout

\end_body
\end_document
