#!/software/perl-5.10.1/bin/perl

use strict;
use warnings;
use Getopt::Long;
use Vcf;

my $before_file = undef;
my $after_file = undef;
my $map_file = undef;
my $b_dist_file = undef;
my $a_dist_file = undef;
my $baq = 1;
my $ref = undef;
my $genotypes = undef;
my $sample = undef;

GetOptions("sample|s=s" => \$sample, "before|b=s" => \$before_file, "after|a=s" => \$after_file, "mat|out|m|o=s" => \$map_file,
           "before-dist-out|bdo=s" => \$b_dist_file, "after-dist-out|ado=s" => \$a_dist_file,
           "reference|ref|r=s" => \$ref, "baq!" => \$baq, "genotypes|vcf=s" => \$genotypes);

$ref && -e $ref or die "you must provide a reference";
$before_file && -e $before_file or die "you must provide a before alignment file";
$after_file && -e $after_file or die "you must provide a after alignment file";
$map_file or die "you must provide an matrix output file name";
!defined $genotypes || -f $genotypes or die "provided genotypes vcf file '$genotypes' does not seem to exist or is not a regular file";
die "if you provide the genotypes you have to provide a sample name too" if ($genotypes && ! $sample);

my $vcf = undef;
my $variant = undef;
my %err_map = (0 => {}, 1 => {}, 2 => {}, any => {}, none => {});
my %err_bdist = (0 => {}, 1=> {}, 2 => {}, any => {}, none => {});
my %err_adist = (0 => {}, 1=> {}, 2 => {}, any => {}, none => {});

if ($genotypes) {
  $vcf = Vcf->new(file => $genotypes);
  $vcf->parse_header;
  my $found = 0;
  foreach my $s ($vcf->get_samples) {
    if ($s eq $sample) {
      $found = 1;
      last;
    } 
  }
  $found or die "could not find the sample in the input genotype vcf file";
  $variant = $vcf->next_data_hash();
}

my $samtools_prefix = "samtools mpileup " . ($baq ? "" : "-B") . " -f $ref -Q 0";

open(BEFORE,"$samtools_prefix $before_file |") or die "$before_file";
open(AFTER,"$samtools_prefix $after_file |") or die "$after_file";

my $before = <BEFORE>;
my $after = <AFTER>;

my %map = ();

my %bdist = ();

my %adist = ();
my $count = 0;

while ($before && $after) {
  chomp $before;
  chomp $after;
 
  my @before = split(/\t/,$before);
  my @after = split(/\t/,$after);

 # unless ($#before == 9)
  unless ($#before == 5) {
    $before = <BEFORE>;
    $after = <AFTER>;
    next;
  }

  #my ($before_chr,$before_pos,$before_bases,$before_quals) = @before[0,1,8,9];
  #my ($after_chr,$after_pos,$after_bases,$after_quals) = @after[0,1,8,9];
  my ($before_chr,$before_pos,$before_bases,$before_quals) = @before[0,1,4,5];
  my ($after_chr,$after_pos,$after_bases,$after_quals) = @after[0,1,4,5];

  die "no sample chr or pos $before $after" unless $before_chr eq $after_chr && $before_pos == $after_pos;
  die "HERE $before_bases\t$after_bases" unless $before_bases eq $after_bases;
  
  my $b_len = length($before_quals);
  my $a_len = length($after_quals);
  die "HERE2 $before\t$after" unless $b_len == $a_len;

  if ($vcf) {
    while ($variant && $variant->{CHROM} lt $before_chr || ($variant->{CHROM} eq $before_chr && $variant->{POS} < $before_pos)) {
      $variant = $vcf->next_data_hash;
    }
    if ($variant->{CHROM} eq $before_chr && $variant->{POS} eq $before_pos) {
      my $gt = $variant->{gtypes}->{$sample};
      my $seg = exists $variant->{INFO}->{SEGREGATES};
      my $er = $gt->{ER} || $seg ? 2 : 1;
      my $cer = $gt->{ER};
      my $obs = $gt->{GT};
      my $exp = $cer <= 0 ? $obs : ($obs ? 0 : 1);
      my @calls = bases_to_calls($before_bases);
      
      for (my $i = 0; $i < $b_len; $i++) {
        my $b_qual = substr($before_quals,$i,1);
        my $a_qual = substr($after_quals,$i,1);
        my $call = $calls[$i];
        my $key = $b_qual . "\t" . $a_qual;
        if ($call != $exp) {
           $err_map{$er}->{$key}++;
           $err_map{any}->{$key}++;
           $err_map{0}->{$key}++ if $cer == 0;
          
        }
        $err_bdist{$er}->{$b_qual}++;
        $err_adist{$er}->{$a_qual}++;
        $err_bdist{any}->{$b_qual}++;
        $err_adist{any}->{$a_qual}++;
        if ($cer == 0) {
          $err_adist{0}->{$a_qual}++;
          $err_bdist{0}->{$b_qual}++;
        }
      } 
    }
  }

  foreach (my $i = 0; $i < $b_len; $i++) {
    my $b = substr($before_quals,$i,1);
    my $a = substr($after_quals,$i,1);
    my $key = $b . "\t" . $a;
    $map{$key}++;
    $bdist{$b}++;
    $adist{$a}++;
  } 

  $count++;

  if (($count & (8192 + 8192 - 1)) == 8192) {
    print STDERR "var $before_chr\t$before_pos\t$count\n";
  }

  $before = <BEFORE>;
  $after = <AFTER>;
}

my @b_sorted = sort keys %bdist;
my @a_sorted = sort keys %adist;

my @all_sorted = sort (@b_sorted,@a_sorted);
my $min = ord($all_sorted[0]) - 33;
my $max = ord($all_sorted[$#all_sorted]) - 33;

if ($b_dist_file) {

  open(B_DIST,">$b_dist_file");
  foreach my $b (@b_sorted) {
    my $n = ord($b) - 33;
    print B_DIST join("\t",$n,$bdist{$b}),"\n";
  }
  close(B_DIST);

  if ($vcf) {
    err_bdist_output(0,'NoCallErr');
    err_bdist_output(1,'MendelErr');
    err_bdist_output(2,'ErrantErr');
    err_bdist_output('any','AnyErr');
  }
}

if ($a_dist_file) {
  open(A_DIST,">$a_dist_file");
  foreach my $a (@a_sorted) {
    my $n = ord($a) - 33;
    print A_DIST join("\t",$n,$adist{$a}),"\n";
  }
  close(A_DIST);

  if ($vcf) {
    err_adist_output(0,'NoCallErr');
    err_adist_output(1,'MendelErr');
    err_adist_output(2,'ErrantErr');
    err_adist_output('any','AnyErr');
  }

}

open(MAP,">$map_file");
print MAP join("\t", ( $min .. $max )),"\n";
for (my $i = $min; $i <= $max; $i++) {
  my $ic = chr($i + 33);
  my @data = ();
  for (my $j = $min; $j <= $max; $j++) {
    my $jc = chr($j + 33);
    push @data, $map{$ic . "\t" . $jc} || 0;
  }
  print MAP join("\t", $i, @data),"\n";
}
close(MAP);


if ($vcf) {
  err_map_output(0,'NoCallErr');
  err_map_output(1,'MendelErr');
  err_map_output(2,'ErrantErr');
  err_map_output('any','AnyErr');
}

sub err_map_output {
  my $er = shift;
  my $ext = shift;
  open(MAP,">${map_file}.${ext}");
  print MAP join("\t", ( $min .. $max )),"\n";
  for (my $i = $min; $i <= $max; $i++) {
    my $ic = chr($i + 33);
    my @data = ();
    for (my $j = $min; $j <= $max; $j++) {
      my $jc = chr($j + 33);
      push @data, $err_map{$er}->{$ic . "\t" . $jc} || 0;
    }
    print MAP join("\t", $i, @data),"\n";
  }
  close(MAP);
}

sub err_adist_output {
    my $er = shift;
    my $ext = shift;
    open(DIST,">${a_dist_file}.${ext}");
    foreach my $a (@a_sorted) {
      my $n = ord($a) - 33;
      print DIST join("\t",$n,$err_adist{$er}->{$a} || 0),"\n";
    }
    close(DIST);
}

sub err_bdist_output {
    my $er = shift;
    my $ext = shift;
    open(DIST,">${b_dist_file}.${ext}");
    foreach my $b (@b_sorted) {
      my $n = ord($b) - 33;
      print DIST join("\t",$n,$err_bdist{$er}->{$b} || 0),"\n";
    }
    close(DIST);
}




sub bases_to_calls {
  my ($bases) = @_;
  my @result = ();
  my $i = 0;
  my $len = length($bases);
  while ($i < $len) {
     my $c = substr($bases,$i,1);
     if ($c eq '.' || $c eq ',') {
       push @result,0;
     }
     elsif ($c eq '$') {
       # no call.
     }
     elsif ($c eq '^') {
       $i++;
     }
     elsif ($c eq '+') {
       pos($bases) = $i;
       $bases =~ /\G\+(\d+)/;
       $i = pos($bases) + $1 - 1;
     }
     else {
       push @result , 1;
     }
     $i++;
  }
  return @result;
}




