#!/usr/bin/env perl 

use strict;
use warnings;

use Getopt::Long;
use IO::File;
use File::Spec::Functions;

my $vcf_in;
my $dir_out;
my $template;
my $cpo = 0;

GetOptions("in=s" => \$vcf_in, "out=s" => \$dir_out, "tpl=s" => \$template, "common-positions-only|cpo" => \$cpo);

$vcf_in or die "need to specify a input vcf file e.g. '--in input.vcf'";
$dir_out or die "need to specify a output directory e.e. '--out out-dir'";
!defined($template) || -f $template or die "if you specify a template, it does need to exist and be a regular file";

-e $vcf_in or die "the vcf_file provided does not exists!!!";
-f $vcf_in or die "the vcf_file provided is not a regular file!!!";
-e $dir_out && (!-d $dir_out) and die "the output directory provided is in fact not a directory";
mkdir($dir_out) unless -e $dir_out;

my $in_fh = IO::File->new($vcf_in) or die "could not open '$vcf_in' for reading";

my @out_file_names = map { catfile($dir_out,'snps.data.' . $_) } (qw(a c g t));
my @out_handles = map { IO::File->new($_,'w')  || die "could not open '$_' to write" } @out_file_names;
my ($a_out_fh,$c_out_fh,$g_out_fh,$t_out_fh)  = @out_handles;

my %nuc_to_handle = (A => $a_out_fh, C => $c_out_fh, G => $g_out_fh, T => $t_out_fh);
my %nuc_to_pos = (A => 0, C => 1, G => 2, T => 3);
my $tfh = $template ? IO::File->new($template) || die "could not open template '$template'" : undef;

my @header = (); 
my @tpl_samples = ();
my $tpl_line;
if ($tfh) {
  $tpl_line = <$tfh>;
  chomp $tpl_line;
  @header = split(/\t/,$tpl_line);
  @tpl_samples = @header[3..$#header];
  foreach (my $i = 0; $i <= $#tpl_samples; $i++) {
     $tpl_samples[$i] =~ s/^(.*)\.all$/$1/;
  }
}

my $in_line = <$in_fh>;
while ($in_line !~ /^#CHROM/) { $in_line = <$in_fh>; }
chomp $in_line;

my @in_header = split(/\t/,$in_line);
my @in_samples = @in_header[9..$#in_header];
my @out_samples = ();
my @sample_offsets = ();
match_sample_lists(\@tpl_samples,\@in_samples,\@sample_offsets,\@out_samples);

my ($t_chr,$t_pos) = (undef,undef);
if ($tfh) {
  $tpl_line = <$tfh>;
  $tpl_line  and ($t_chr,$t_pos) = split(/\t/,$tpl_line);
}

foreach my $fh (@out_handles) {
  print $fh join("\t","Chromosome","Position","Reference",map { $_ . ".all" } @out_samples),"\n";
}

while ($in_line = <$in_fh>) {
  chomp $in_line;
  my ($chr,$pos,$id,$ref,$alt,$qual,$filter,$info,$format,@genotypes) = split(/\t/,$in_line);
 
  if ($tfh) {
    while ($tpl_line && ($t_chr cmp $chr || $t_pos <=> $pos) < 0) {
       print STDERR "Skipping template position not found in vcf ($t_chr,$t_pos) when looking for ($chr,$pos) \n";
       $tpl_line = <$tfh>;
       $tpl_line and ($t_chr,$t_pos) = split(/\t/,$tpl_line);
    }
    if (! $tpl_line ) {
      print STDERR "Reached template's end before input end at $chr $pos\n";
      $tfh->close();
      $tfh = undef;
      last if ($cpo);
    }
    elsif ($t_chr eq $chr && $t_pos == $pos) {
       $tpl_line = <$tfh>;
       $tpl_line and ($t_chr,$t_pos) = split(/\t/,$tpl_line);
       unless ($tpl_line) {
         $tfh->close();
         $tfh = undef unless ($tpl_line);
       }
    }
    elsif ($cpo) {
       print STDERR "Skipping input variant $chr $pos not found in template\n";
       next;
    }
  }
  my %nuc_to_counts = map { $_ => [ map { 0 } (0 .. $#genotypes)]  }  (qw(A C G T));
  my @alt = split(/,/,$alt);
  my @refAndAlt = ($ref,@alt);
  my $alt_length = scalar(@alt);
  my @format = split(/:/,$format);
  my $ad_offset = 0;
  while ($ad_offset <= $#format && $format[$ad_offset] ne "AD") { $ad_offset++ };
  die "AD missing in variant!!!" unless $ad_offset <= $#format;
  for (my $i = 0; $i <= $#genotypes; $i++) {
     my $genotype = $genotypes[$i];
     my $ad = (split(/:/,$genotype))[$ad_offset];
     my @counts = split(/,/,$ad);
     my %counts_by_nuc = (map { $_ => 0 } (qw(A C G T)));
     foreach (my $j = 0; $j <= $#refAndAlt; $j++) {
        $nuc_to_counts{$refAndAlt[$j]}->[$sample_offsets[$i]] = $counts[$j];
     }
  }
  foreach my $nuc (keys %nuc_to_pos) {
     my $nuc_pos = $nuc_to_pos{$nuc};
     my $out_fh = $out_handles[$nuc_pos];
     print $out_fh join("\t",$chr,$pos,$ref,@{$nuc_to_counts{$nuc}}),"\n";
  }
}

if ($tfh) {
  print STDERR "Skipping last part of template ($t_chr $t_pos and beyond) as vcf end was reached first.\n";
}
foreach my $fh (@out_handles) {
  $fh->close();
}

sub match_sample_lists {
  my ($tpl_list,$vcf_list,$offsets,$out_samples) = @_;

  print STDERR "TPL :" . join(":\t:",@$tpl_list),":\n";
  print STDERR "VCF :" . join(":\t:",@$vcf_list),":\n";
  
  if ($#$tpl_list == -1) {
    @$offsets = (0 .. $#$vcf_list);
    @$out_samples = @$vcf_list;
    return;
  }

  my $tpl_next_idx = 0;
  my $vcf_next_idx = 0;

  my %tpl_idx = (map {$_ => $tpl_next_idx++} @$tpl_list);
  my %vcf_idx = (map {$_ => $vcf_next_idx++} @$vcf_list);

  
  if ($tpl_next_idx != $vcf_next_idx) {
    die "difference in the number of samples in the template ($tpl_next_idx) and vcf file ($vcf_next_idx)";
  }  

  my @tpl_missing = grep { !exists($vcf_idx{$_}) } keys (%tpl_idx);
  my @vcf_missing = grep { !exists($tpl_idx{$_}) } keys (%vcf_idx);

  die "samples in the template missing in the vcf: " .join(", ",@tpl_missing) ."\n" unless $#tpl_missing == -1;
  die "samples in the vcf missing in the template: " .join(", ",@vcf_missing) ."\n" unless $#vcf_missing == -1;

  for (my $i = 0; $i <= $#$vcf_list; $i++) {
    $$offsets[$i] = $tpl_idx{$$vcf_list[$i]};
    $$out_samples[$i] = $$tpl_list[$i];
  }
}

1; 
