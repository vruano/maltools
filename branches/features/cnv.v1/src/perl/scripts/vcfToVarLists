#!/usr/bin/env perl

# This generates SNP and InDel lists from multiple VCF files.

use strict;
use warnings;
use IO::File;
use POSIX qw(strftime);
use Getopt::Long ;

my @inputs = ();
my $snpout = undef;
my $indelout = undef;
GetOptions  ( "input|i=s@" => \@inputs , "snpout|so|o=s" => \$snpout, "indelout|io=s" => \$indelout );

push @inputs, @ARGV;

die "you must specify at least one input file" unless $#inputs >= 0;
die "you must specify and output" unless $snpout || $indelout;

my @bad = grep { ! -e $_ } @inputs;
die "some inputs are missing: " . join(", ",@bad) if $#bad >= 0;

@bad = grep { ! -f $_ } @inputs;
die "some inputs are not regular files: " . join(", ",@bad) if $#bad >= 0;

@bad = grep { ! -r $_ } @inputs;
die "some inputs cannot be read: ".join(", ",@bad) if $#bad >= 0;


my $snpout_fh = IO::File->new($snpout ? $snpout : '/dev/null','w') or die "could not open '$snpout' for output";
my $indelout_fh = IO::File->new($indelout ? $indelout : '/dev/null','w') or die "could not open '$indelout' for output";

my $inputs_str = join(" ",@inputs);
my %snps ;
my %indels ;
my %refbase ;
open FILE , "cat $inputs_str |" ;
while ( <FILE> ) {
	next if $_ =~ /^#/ ;
	my @d = split "\t" , $_ ;
	
	my @parts = split ',' , $d[4] ;
	
	my $indel = $d[7] =~ m/\bINDEL\b/ ;
	if ( $indel ) { # INDEL
		add_indel ( $d[0] , $d[1] , $d[3] , uc $_ ) foreach @parts ;
	} else { # SNP
		$snps{$d[0]}->{$d[1]}->{uc $_} = 1 foreach @parts ;
		$refbase{$d[0]}->{$d[1]} = $d[3] ;
	}
}
close FILE ;


# Write InDels
foreach my $chr ( sort keys %indels ) {
	foreach my $pos ( sort { $a <=> $b } keys %{$indels{$chr}} ) {
		foreach my $var ( sort keys %{$indels{$chr}->{$pos}} ) {
			my $cnt = $indels{$chr}->{$pos}->{$var} ;
			print $indelout_fh "$chr\t$pos\t$var\t$cnt\n" ;
		}
	}
}
$indelout_fh->close();

# Write SNPs
my %iupac = (
	'A' => 'A',
	'C' => 'C',
	'G' => 'G',
	'T' => 'T',
	'R' => 'AG',
	'Y' => 'CT',
	'M' => 'AC',
	'K' => 'GT',
	'W' => 'AT',
	'S' => 'CG',
	'B' => 'CGT',
	'D' => 'AGT',
	'H' => 'ACT',
	'V' => 'ACG',
	'N' => 'ACGT'
);
my %iupac_reverse ;
foreach ( keys %iupac ) {
	my $v = $iupac{$_} ;
	$iupac_reverse{$v} = $_ ;
}

foreach my $chr ( sort keys %snps ) {
	foreach my $pos ( sort { $a <=> $b } keys %{$snps{$chr}} ) {
		my $ref = $refbase{$chr}->{$pos} ;
		delete $snps{$chr}->{$pos}->{$ref} if defined $snps{$chr}->{$pos}->{$ref} ; # Force reference base off
		my $vars = join ( '' , sort keys %{$snps{$chr}->{$pos}} ) ;
		die "Bad IUPAC combination : $vars\n" unless defined $iupac_reverse{$vars} ;
		$vars = $iupac_reverse{$vars} ;
		print $snpout_fh "$chr\t$pos\t$ref\t$vars\n" ;
	}
}

$snpout_fh->close();


0 ;

sub add_indel {
	my ( $chr , $pos , $s1 , $s2 ) = @_ ;
	my $s ;
	if ( length($s1) < length($s2) and substr($s2,0,length($s1)) eq $s1 ) { # Insertion
		$s = '+' . substr ( $s2 , length($s1) ) ;
		$pos += length $s1 ;
	} elsif ( length($s1) > length($s2) and substr($s1,0,length($s2)) eq $s2 ) { # Deletion
		$s = '-' . substr ( $s1 , length($s2) ) ;
		$pos += length $s2 ;
	} else {
		return ; # Skipping
	}
	$indels{$chr}->{$pos}->{$s}++ ;
}
