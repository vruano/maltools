#!/usr/bin/env perl

use strict ;
use warnings ;
use Getopt::Long ;

sub read_fasta {
        my ( $file ) = @_ ;
        my %ret ;
        my $seq ;
        my $name ;
        open FILE , $file ;
        while ( <FILE> ) {
                chomp ;
                if ( $_ =~ /^>/ ) {
                        if ( defined $seq ) {
                                $ret{$name} = $seq ;
                        }
                        $name = substr $_ , 1 ;
                        $name =~ s/^\s// ;
                        $seq = '' ;
                } else {
                        $seq .= $_ ;
                }
        }
        $ret{$name} = $seq if $seq ne '' ;
        close FILE ;
        return \%ret ;
}


my ( $indels , $reference) ;


GetOptions  (	'reference=s' => \$reference ,
				'indels' => \$indels
) ;

my $bamfile = $ARGV[0] ;

die "USAGE : bam2cov.pl [--indels] [--reference REFERENCE] BAMFILE\n" unless defined $bamfile ;

print "REFERENCE $reference\n";
$reference or die "no existing reference file was provided";
my $genome = read_fasta ( $reference ) ;

open PILEUP , "samtools pileup -f '$reference' '$bamfile' |"  or die "could not get the pileup, $!";
print "Chromosome\tPosition\tReference\tA\tC\tG\tT" ;
print "\tInsertions\tDeletions" if $indels ;
print "\n" ;

$genome->{''} = '' ;
my $last_chr = '' ;
my $last_pos = 0 ;
my $chrlen = 0 ;

my $blanks = "\t0\t0\t0\t0" ;
$blanks .= "\t0\t0" if $indels ;

while ( <PILEUP> ) {
	my ( $chr , $pos , $ref , $depth , $bases , $qual ) = split "\t" , $_ ;
	
	fillerup ( $chr , $pos ) ;
	
	next if length $chrlen < $pos ;
	
	
	$bases =~ s/[.,]/$ref/g ;
	$bases = uc $bases ;
	
	my $insertions = 0 ;
	my $deletions = 0 ;
	if ( $indels ) {
		while ( $bases =~ m/\+(\d+)[ACGT]/g ) {
			$insertions += $1 ;
		}
		while ( $bases =~ m/\-(\d+)[ACGT]/g ) {
			$deletions += $1 ;
		}
	}
	$bases =~ s/[\+\-]\d+[ACGTN]//g ;
	
	$bases =~ s/[^ACGT]//g ;

	print "$chr\t$pos\t$ref" ;
	print "\t" . ($bases =~ tr/A//) ;
	print "\t" . ($bases =~ tr/C//) ;
	print "\t" . ($bases =~ tr/G//) ;
	print "\t" . ($bases =~ tr/T//) ;
	print "\t$insertions\t$deletions" if $indels ;
	print "\n" ;
}
close PILEUP ;

fillerup ( '' , 0 ) ;

sub fillerup {
	my ( $chr , $pos ) = @_ ;
	if ( $chr eq $last_chr and $pos == $last_pos + 1 ) {
		$last_pos++ ;
		return ;
	}
	if ( $last_chr eq $chr ) {
		foreach ( $last_pos + 1 .. $pos - 1 ) {
			print "$chr\t$_\t" . substr ( $genome->{$chr} , $_-1 , 1 ) . "$blanks\n" ;
		}
	} else {
		foreach ( $last_pos+1 .. length $genome->{$last_chr} ) {
			print "$last_chr\t$_\t" . substr ( $genome->{$last_chr} , $_-1 , 1 ) . "$blanks\n" ;
		}
		foreach ( 1 .. $pos-1 ) {
			print "$chr\t$_\t" . substr ( $genome->{$chr} , $_-1 , 1 ) . "$blanks\n" ;
		}
	}
	$last_chr = $chr ;
	$last_pos = $pos ;
	$chrlen = $genome->{$chr} ;
}
