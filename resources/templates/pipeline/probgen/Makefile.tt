OUTDIR=.
ALIGNMENTS_PATH=[% manifest.get_path('alignments') %]
SNPSDATA_PATH=[% manifest.get_path('snpsdata') %]
COVERAGE_PATH=[% manifest.get_path('coverage') %]
TMP_DIR=[% manifest.get_path('temp') || './tmp' %]

PGV=[% program %]
CANDIDATE_SNPS_LIST=[% manifest.get_parameter('candidateSnps') == 'all' ? 'all' : manifest.get_parameter('candidateSnpList')  %]
REFERENCE=[% manifest.get_reference %]
MAX_RANDOM_SLEEP=60

ALL_SAMPLE_NAMES=[% manifest.get_sample_ids.join(' ') %]
ALL_ALIGNMENTS=$(addprefix $(ALIGNMENTS_PATH)/,$(addsuffix .bam,$(ALL_SAMPLE_NAMES)))
ALL_INDEXES=$(addprefix $(ALIGNMENTS_PATH)/,$(addsuffix .bam.bai,$(ALL_SAMPLE_NAMES)))
ALL_ALIGNMENT_AND_INDEXES=$(join $(ALL_ALIGNMENTS), $(ALL_INDEXES))
GENOTYPER=MetaGenotyper
INTERVALS=[% manifest.get_intervals.values.join(' ') %]

$(shell mkdir -p $(ALIGNMENTS_PATH) $(SNPSDATA_PATH) $(COVERAGE_PATH) $(TMP_DIR))

.DELETE_ON_ERROR:

.PHONY: all variation alignments

all: variation

variation: $(OUTDIR)/all.vcf

$(OUTDIR)/all.vcf:
	$(PGV) genotype -g $(GENOTYPER) -r $(REFERENCE) $(addprefix -i ,$(ALL_ALIGNMENTS)) -o $@ 

alignments: init $(ALL_ALIGNMENTS)

init:
	@echo "Starting processing...."
	mkdir -p $(TMP_DIR)

[% INCLUDE candidate_snps_rules | trim %]

[% FOREACH sample_id IN manifest.get_sample_ids %]
[% INCLUDE sampleRules.inc sample_id = sample_id  | trim %]
[% END %]
	
%.bam.bai : %.bam
	$(PGV) index -i $< -o $@

.SECONDARY : %.bam.bai

$(TMP_DIR)/%.som : $(ALIGNMENTS_PATH)/%.bam [% IF manifest.get_parameters('candidateSnps') != 'all' %]$(CANDIDATE_SNPS_LIST)[% END %]
	$(PGV) som-filter -i $< -o $@ --snpList=$(CANDIDATE_SNPS_LIST)

.SECONDARY: $(TMP_DIR)/%.som

.PHONY: %.random-sleep

%.stat-sleep :
	test -e $* || random-sleep $(MAX_RANDOM_SLEEP)

[%###################################%]
[% BLOCK candidate_snps_rules %]
[% candidateSnps = manifest.get_parameter('candidateSnps') %]
[% IF candidateSnps == 'calculate' %] 

$(TMP_DIR)/%.samtools-vcf : $(ALIGNMENTS_PATH)/%.bam 
	$(PGV) genotype -g Samtools -i $< -o $@

.SECONDARY: $(TMP_DIR)/%.samtools-vcf

$(CANDIDATE_SNPS_LIST) : $(addprefix $(TMP_DIR)/, $(addsuffix .samtools-vcf, $(ALL_SAMPLE_NAMES)))
	$(PGV) candidate-snps create -r $(REFERENCE) $(addprefix -i ,$^) -o $@ 

.PRECIOUS: $(CANDIDATE_SNPS_LIST)
[% ELSIF ! candidateSnps == 'provided' %]
$(CANDIDATE_SNPS_LIST) :
	@echo "Candidate SNPs list missing, please provide one at $(CANDIDATE_SNPS_LIST)"
	@exit 1
[% END %]
[% END %]
