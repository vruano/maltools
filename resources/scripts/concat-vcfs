#!/usr/bin/env perl

use strict;
use warnings;

use IO::File;
use Getopt::Long;
use Maltools::Reference;

my $reference = undef;
my @in_files = undef;
my $out_file = undef;

GetOptions( 
  "r=s" => \$reference,
  "i=s" => \@in_files,
  "f=s" => \&process_file_list,
  "o=s" => \$out_file);

sub process_file_list {
  my ($opt,$file_name) = @_;

  open my $fh , $file_name or die "could not open '$file_name' to read";
  my @inputs = <$fh>;
  close $fh;
  chomp @inputs;
  push @in_files, @inputs;
}


my @bad_inputs = grep { not $_ && -f $_ && -r $_ } @in_files;

die "invalid input files (not found, regular nor readable):\n\t" . join("\n\t",@bad_inputs) . "\n" if @bad_inputs;

die "must indicate a reference" unless defined $reference;
die "could not open to read or is not a regular file '$reference'" unless -f $reference && -r $reference; 

$reference = Maltools::Reference->new(sequence_file => $reference);


my %positions = map { ($_ => peek_position ($_)) } @in_files;

@in_files = sort { $positions{$a} <=> $positions{$b} } @in_files;

my $out_fh = defined $out_file && $out_file ne '-' ? IO::File->new($out_file,"r") : \*STDOUT;
print_vcf(shift(@in_files) => $out_fh, skip_header => 0);
print_vcf($_ => $out_fh, skip_header => 1) foreach @in_files;
close $out_fh;
exit 0;


sub print_vcf {
  process_vcf($_[0],output => $_[1],@_[2 .. $#_]);
}

sub peek_position {
  process_vcf($_[0],peek_start => 1);
}

sub process_vcf {
  my $file = shift;
  my %opts = @_;

  my $skip_header = $opts{skip_header};
  open my $in_fh , $file or die "could not read from $file\n";

  my $line = <$in_fh>;
  if ($skip_header) {
    while ($line) {
      last unless index($line,'#') == 0;
      $line = <$in_fh>;
    }
  }
  if ($opts{peek_start}) {
    my ($chr,$pos) = split(/\s+/,$line);
    close $in_fh;
    return $line ? $reference->location($chr => $pos) : undef;
  }
  my $out_fh = $opts{out_fh};
  while ($line) {
    print $out_fh $line;
    $line = <$in_fh>;
  }
  close $in_fh;
}




