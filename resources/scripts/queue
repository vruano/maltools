#!/usr/bin/env perl

use Getopt::Long qw(:config require_order pass_through);
use File::Spec::Functions qw(catfile);
use File::Temp qw(tempfile tempdir);
use Cwd qw(getcwd);
use IO::File;
use File::Path qw(remove_tree);

use warnings;
use strict;
use vars qw(%ENV);

my $memory = 1000;
GetOptions("memory=i" => \$memory);
my $agv_home = $ENV{PGV_HOME};
#my $jar_file = catfile($agv_home,'libs','Sting','dist','Queue.jar');
my $cp_dir = catfile($agv_home,'libs','Sting','dist','classes');
@ARGV = map { $_ =~ /\s+/ ? '"'.$_.'"' : $_ } @ARGV;
my $cwd = getcwd();
my $tmp_dir = ($cwd =~ /lustre/) ? tempdir("queue_tmpXXXX", DIR => $cwd) : tempdir("queue_tmpXXXX", DIR => '/lustre/scratch101/sanger/vrr/tmp');
mkdir $tmp_dir;
#my $java_cmd = join(" ",'java',"-Xmx${memory}m",'-Djava.io.tmpdir=' . $tmp_dir, '-jar',$jar_file,@ARGV);
my $java_cmd = join(" ",'java',"-Xmx${memory}m",'-Djava.io.tmpdir=' . $tmp_dir ,  '-cp',$cp_dir,'org.broadinstitute.sting.queue.QCommandLine',@ARGV);

print STDERR $java_cmd,"\n";
my ($efh,$efn) = tempfile();
$efh->close();
system($java_cmd . " 2> $efn");
$efh = IO::File->new($efn);
my $error_found = 0;
while (my $line = <$efh>) {
  $error_found = 1 if ($line =~ /^#*\s*ERROR/);
  print STDERR $line;    
}
unless($error_found) {
  remove_tree($tmp_dir);
}
$efh->close();
unlink $efn;
exit $error_found ? 1 : 0;
