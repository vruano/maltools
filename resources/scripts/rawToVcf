#!/usr/bin/env perl

use strict;
use warnings;

use Getopt::Long;
use File::Spec::Functions;
use IO::File;

my $in_dir = "."; 
my $skip_mono = 0;
my $skip_mono_noref = 0;

GetOptions("in=s" => \$in_dir,"sm" => \$skip_mono, "sr" => \$skip_mono_noref);

my @file_names = map { catfile($in_dir,"snps.data." . $_) } (qw(a c g t));

my @handles = map { IO::File->new($_) } @file_names;

my $example = $handles[0];

my @lines = ();
for (my $i = 0; $i <= $#handles; $i++) {
   my $fh = $handles[$i];
   $lines[$i] = <$fh>;
}

my %nuc_to_idx = (A => 0, C => 1, G => 2, T => 3);
my %idx_to_nuc = (0 => 'A', 1 => 'C', 2 => 'G', 3 => 'T');


print "##fileformat=VCFv4.0\n";
print "##INFO=<ID=AD,Number=.,Type=Integer,Description=\"Allele count in genotypes\">\n";
print "##INFO=<ID=CODING,Number=0,Type=Flag,Description=\"Mark variants at protein coding positions\">\n";
print "##INFO=<ID=UQ,Number=1,Type=Integer,Description=\"Uniqueness score for this variant\">\n";
print "##INFO=<ID=NS,Number=1,Type=Integer,Description=\"Number of Samples With Data\">\n";
print "##INFO=<ID=DP,Number=1,Type=Integer,Description=\"Total Depth\">\n";
print "##FORMAT=<ID=GT,Number=1,Type=String,Description=\"Genotype\">\n";
print "##FORMAT=<ID=DP,Number=1,Type=Integer,Description=\"Read depth\">\n";
print "##FORMAT=<ID=AD,Number=.,Type=Integer,Description=\"Allelic depths for the ref and alt alleles in the order listed, base-quality filtered\">\n";

chomp $lines[0];
my @header= split(/\t/,$lines[0]);
my $sample_count = $#header + 1 - 3;
my @samples = @header[3..$#header];
for (my $i = 0; $i <= $#samples; $i++) { $samples[$i] =~ s/\.all$//; }
{
 no warnings;
 print join("\t",qw(#CHROM POS ID REF ALT QUAL FILTER INFO FORMAT),@samples),"\n";
}

@lines = ();
for (my $i = 0; $i <= $#handles; $i++) {
   my $fh = $handles[$i];
   $lines[$i] = <$fh>;
}

my ($chr,$pos,$ref);
my @genotypes = map { [0,0,0,0] } (1..$sample_count);
while($lines[0]) {
  my @sample_depths = map { 0 } (1..$sample_count);
  my @totals = (0,0,0,0);
  for (my $i = 0; $i <= $#handles; $i++) {
     chomp $lines[$i];
     my @allele_genotypes;
     ($chr,$pos,$ref,@allele_genotypes) = split(/\t/,$lines[$i]);
     for (my $j = 0; $j <= $#allele_genotypes; $j++) {
       $genotypes[$j]->[$i] = $allele_genotypes[$j];
       $totals[$i] += $allele_genotypes[$j];
       $sample_depths[$j] += $allele_genotypes[$j]; 
     }
     my $fh = $handles[$i];
     $lines[$i] =  <$fh>;
  }
  
  my $total = 0;
  foreach my $t (@totals) { $total += $t };

  my $ref_idx = $nuc_to_idx{$ref};
  my @all_alleles = grep { $totals[$_] } ($ref_idx,0 .. ($ref_idx - 1), ($ref_idx + 1) .. 3 );
  if ($#all_alleles <= 0) {
    next if $skip_mono;
  }
  elsif ($#all_alleles == 1) {
    next if $skip_mono_noref && $totals[$ref_idx] == 0;
  }
  
  my $alt = join(",",map { $idx_to_nuc{$all_alleles[$_]} } (1 .. $#all_alleles)); 
  my @genotypes_strs = (map { ".:" . $sample_depths[$_] . ":" . join(",", @{$genotypes[$_]}[@all_alleles] )  } (0..$sample_count-1));
  print join("\t",$chr,$pos,".",$ref,$alt,"-1",".",join(":","DP=$total","AD=" . join(",",@totals[@all_alleles])),"GT:DP:AD",@genotypes_strs),"\n";

}
