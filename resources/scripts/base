#!/usr/bin/env perl 

use strict;
use warnings;
use vars qw(@ARGV);

use Maltools::Command;
use Samtrak::Site;
use Getopt::Long qw(:config pass_through);

my $procs = 1;
my $queue = undef;
my $memory = undef;
my $retries = 3;

GetOptions('t|procs=i' => \$procs, 'queue=s' => \$queue, 'memory=i' => \$memory, 'retries=i' => \$retries);

my %running_options = ();

$running_options{memory} = $memory if $memory;
$running_options{queue} = $queue if $queue;
$running_options{procs} = $procs if $procs;
$running_options{retries} = $retries; 

syntax_and_exit(0) if scalar(@ARGV)  < 1;

my $cmd = shift @ARGV;
my $cls = cmd_to_class($cmd) or die "There is not such command '$cmd'";
my $obj = $cls->new();
$obj->running_options(\%running_options);
my $code = eval { $obj->run(Samtrak::Site->new,{procs => $procs, arguments => \@ARGV}) };
exit $code if !$@ && $code == 0;
print STDERR "Error executing command: $@\n" if $@;
exit 1;

### end of main script.

### subrutines

sub syntax_and_exit {
 my $code = shift || 0;
 require File::Basename;
 my $name = File::Basename::basename($0);
 print STDERR "Usage:\n";
 print STDERR " $name cmd options arguments\n\n";
 print STDERR "For a full list of available command use the 'help' command:\n";
 print STDERR " $name help\n";
 exit $code;
}

sub cmd_to_class {
 return Maltools::Command->command_class_by_name(@_);
}
